datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Article {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  slug             String           @unique // üî• Slug unique pour le SEO
  content          String
  image            String? // URL de l‚Äôimage
  iconSrc          String? // URL de l'ic√¥ne de la cat√©gorie
  category         String?
  tags             String[] // Tableau de tags (stock√© sous forme de JSON)
  printableSupport String? // URL vers le fichier imprimable
  author           String?
  description      String?
  date             DateTime         @default(now()) // Date par d√©faut √† la cr√©ation
  sections         ArticleSection[]
  comments         Comment[]

  // ‚úÖ Relation Many-to-Many g√©r√©e par un mod√®le pivot
  ageCategories AgeCategoryArticle[]

  relatedLinks RelatedArticle[] @relation("FromArticle")
  linkedFrom   RelatedArticle[] @relation("ToArticle")
}

model RelatedArticle {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  fromArticle   Article @relation("FromArticle", fields: [fromArticleId], references: [id])
  fromArticleId String  @db.ObjectId
  toArticle     Article @relation("ToArticle", fields: [toArticleId], references: [id])
  toArticleId   String  @db.ObjectId
}

model ArticleSection {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String  @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  articleId String   @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now())
  approved  Boolean  @default(false)
}

model Idea {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  description String
  image       String?
  theme       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // ‚úÖ Relation Many-to-Many g√©r√©e par un mod√®le pivot
  ageCategories AgeCategoryIdea[]
}

model AgeCategory {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  slug         String           @unique
  description  String
  content      String?
  conclusion   String?
  activityList String[]
  imageCard    String
  imageBanner  String
  tags         AgeCategoryTag[]

  activities Activity[] // ‚úÖ Relations avec cl√© √©trang√®re proprement d√©finies

  // ‚úÖ Relations g√©r√©es via des mod√®les pivot
  articles AgeCategoryArticle[]
  drawings AgeCategoryDrawing[]
  advices  AgeCategoryAdvice[]
  ideas    AgeCategoryIdea[]
}

model Tag {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  label String
  color String

  ageCategories AgeCategoryTag[] // ‚Üê relation pivot explicite

  @@unique([label, color], name: "label_color")
}

model AgeCategoryTag {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  ageCategory   AgeCategory @relation(fields: [ageCategoryId], references: [id])
  ageCategoryId String      @db.ObjectId

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String @db.ObjectId
}

model Activity {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  link          String?
  ageCategory   AgeCategory @relation(fields: [ageCategoryId], references: [id])
  ageCategoryId String      @db.ObjectId
}

model Advice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  description String?
  content     String?
  category    String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // ‚úÖ Relation Many-to-Many g√©r√©e par un mod√®le pivot
  ageCategories AgeCategoryAdvice[]
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
}

model Drawing {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  imageUrl String

  views      Int              @default(0)
  categoryId String?          @db.ObjectId
  category   DrawingCategory? @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  likes      Int              @default(0)
  slug       String           @unique

  // ‚úÖ Relation Many-to-Many g√©r√©e par un mod√®le pivot
  ageCategories AgeCategoryDrawing[]
}

model CategorySection {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?
  iconSrc     String?

  categories DrawingCategory[]
}

model DrawingCategory {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  name      String           @unique
  sectionId String?          @db.ObjectId
  section   CategorySection? @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  parentId String?           @db.ObjectId
  parent   DrawingCategory?  @relation(name: "CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children DrawingCategory[] @relation(name: "CategoryHierarchy")

  drawings Drawing[]

  description String?
  iconSrc     String?
}

model AgeCategoryArticle {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  ageCategoryId String @db.ObjectId
  articleId     String @db.ObjectId

  ageCategory AgeCategory @relation(fields: [ageCategoryId], references: [id], onDelete: Cascade)
  article     Article     @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model AgeCategoryDrawing {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  ageCategoryId String @db.ObjectId
  drawingId     String @db.ObjectId

  ageCategory AgeCategory @relation(fields: [ageCategoryId], references: [id], onDelete: Cascade)
  drawing     Drawing     @relation(fields: [drawingId], references: [id], onDelete: Cascade)
}

model AgeCategoryAdvice {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  ageCategoryId String @db.ObjectId
  adviceId      String @db.ObjectId

  ageCategory AgeCategory @relation(fields: [ageCategoryId], references: [id], onDelete: Cascade)
  advice      Advice      @relation(fields: [adviceId], references: [id], onDelete: Cascade)
}

model AgeCategoryIdea {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  ageCategoryId String @db.ObjectId
  ideaId        String @db.ObjectId

  ageCategory AgeCategory @relation(fields: [ageCategoryId], references: [id], onDelete: Cascade)
  idea        Idea        @relation(fields: [ideaId], references: [id], onDelete: Cascade)
}

model SiteSettings {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Accueil
  homeBanners String[] // ‚¨ÖÔ∏è devient un tableau d'URLs
  homeTitle   String
  homeDesc    String

  // Univers 
  universBanner String?
  universTitle  String?
  universDesc   String?

  // Coloriages
  coloringBanner String?
  coloringTitle  String?
  coloringDesc   String?

  // Conseils
  adviceBanner String?
  adviceTitle  String?
  adviceDesc   String?

  // Id√©es
  ideasBanner String?
  ideasTitle  String?
  ideasDesc   String?

  // Pages par √¢ge
  agePageBanner String?
  agePageTitle  String?
  agePageDesc   String?

  // Actualit√©s
  newsBanner String?
  newsTitle  String?
  newsDesc   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HomeSlide {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl    String
  title       String
  description String
  buttonText  String
  buttonLink  String
  order       Int // pour l'ordre d'affichage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

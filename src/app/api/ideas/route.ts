import prisma from "@/lib/prisma";
import { NextResponse } from "next/server";

// üü¢ R√©cup√©rer toutes les id√©es (READ)
export async function GET() {
    try {
        const ideas = await prisma.idea.findMany({
            orderBy: {
                createdAt: "desc", // Tri par date de cr√©ation d√©croissante
            },
        });

        console.log("üì§ Id√©es envoy√©es :", ideas); // ‚úÖ V√©rifier la r√©ponse Prisma

        if (!ideas || !Array.isArray(ideas)) {
            console.error("‚ö†Ô∏è Prisma a retourn√© une valeur incorrecte :", ideas);
            return NextResponse.json({ error: "Aucune id√©e trouv√©e", data: [] }, { status: 200 });
        }

        return NextResponse.json(ideas);
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des id√©es :", error);
        return NextResponse.json({ error: "Erreur serveur", details: (error as Error).message }, { status: 500 });
    }
}

// üü¢ Ajouter une nouvelle id√©e (CREATE)
export async function POST(req: Request) {
    try {
        const body = await req.json();
        console.log("üì• Requ√™te re√ßue :", body); // ‚úÖ V√©rifie les donn√©es re√ßues

        if (!body.title || !body.description || !body.theme) {
            return NextResponse.json({ error: "‚ùå Champs manquants" }, { status: 400 });
        }

        const newIdea = await prisma.idea.create({
            data: {
                title: body.title,
                description: body.description,
                image: body.image || null, // Image optionnelle
                theme: body.theme, // Th√®me obligatoire
            },
        });

        console.log("‚úÖ Id√©e ajout√©e :", newIdea);
        return NextResponse.json(newIdea, { status: 201 });

    } catch (error) {
        console.error("‚ùå Erreur API :", error);
        return NextResponse.json({ error: "Erreur serveur", details: (error as Error).message }, { status: 500 });
    }
}

import prisma from "@/lib/prisma";
import { NextResponse } from "next/server";

// üü¢ R√©cup√©rer tous les articles (READ)
export async function GET() {
    try {
        const articles = await prisma.article.findMany();
        console.log("üì§ Articles envoy√©s :", articles); // ‚úÖ V√©rifier la r√©ponse Prisma

        if (!articles || !Array.isArray(articles)) {
            console.error("‚ö†Ô∏è Prisma a retourn√© une valeur incorrecte :", articles);
            return NextResponse.json({ error: "Aucun article trouv√©", data: [] }, { status: 200 });
        }

        return NextResponse.json(articles);
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des articles :", error);
        return NextResponse.json({ error: "Erreur serveur", details: (error as Error).message }, { status: 500 });
    }
}

// üü¢ Ajouter un nouvel article (CREATE)
export async function POST(req: Request) {
    try {
        const body = await req.json();
        console.log("üì• Donn√©es re√ßues :", body); // ‚úÖ V√©rifier la requ√™te

        // ‚úÖ V√©rifier si `body` est un tableau ou un objet unique
        const articles = Array.isArray(body) ? body : [body];

        // ‚úÖ V√©rifier que chaque article a bien `title`, `content`, `category`, `author`
        for (const article of articles) {
            if (!article.title || !article.content || !article.category || !article.author) {
                return NextResponse.json({ message: "‚ùå Titre, contenu, cat√©gorie et auteur requis" }, { status: 400 });
            }
        }

        // ‚úÖ Ins√©rer plusieurs articles en une seule requ√™te avec `createMany`
        const newArticles = await prisma.article.createMany({
            data: articles.map(article => ({
                title: article.title,
                content: article.content,
                image: article.image || null,
                iconSrc: article.iconSrc || "/icons/default.png", // ‚úÖ Garde l'ic√¥ne
                category: article.category,
                tags: article.tags || [],
                author: article.author,
                description: article.description || null,
                date: article.date ? new Date(article.date) : null, // ‚úÖ Format `DateTime` corrig√©
            })),
        });

        return NextResponse.json({ message: "‚úÖ Articles cr√©√©s", count: newArticles.count }, { status: 201 });
    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation des articles :", error);
        return NextResponse.json({ message: "Erreur serveur", error: (error as Error).message }, { status: 500 });
    }
}


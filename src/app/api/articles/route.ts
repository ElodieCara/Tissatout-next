import prisma from "@/lib/prisma";
import { NextResponse } from "next/server";
import { generateSlug } from "@/lib/utils";

// üü¢ R√©cup√©rer tous les articles (READ)
export async function GET() {
    try {
        const articles = await prisma.article.findMany({
            orderBy: {
                date: "desc", // Tri par date d√©croissante (le plus r√©cent en premier)
            },
        });

        console.log("üì§ Articles envoy√©s :", articles);

        // ‚úÖ Formater la date avant d'envoyer les articles
        const formattedArticles = articles.map(article => ({
            ...article,
            date: article.date
                ? new Date(article.date).toLocaleDateString("fr-FR", {
                    day: "numeric",
                    month: "long",
                    year: "numeric",
                })
                : "Date inconnue",
        }));

        return NextResponse.json(formattedArticles);
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des articles :", error);
        return NextResponse.json({ error: "Erreur serveur", details: (error as Error).message }, { status: 500 });
    }
}

// üü¢ Ajouter un nouvel article (CREATE)
export async function POST(req: Request) {
    try {
        const body = await req.json();
        console.log("üì• Donn√©es re√ßues :", body);

        // ‚úÖ V√©rifier si `body` est un tableau ou un objet unique
        const articles = Array.isArray(body) ? body : [body];

        // ‚úÖ V√©rifier que chaque article a bien `title`, `content`, `category`, `author`
        for (const article of articles) {
            if (!article.title || !article.content || !article.category || !article.author) {
                return NextResponse.json({ message: "‚ùå Titre, contenu, cat√©gorie et auteur requis" }, { status: 400 });
            }
        }

        // ‚úÖ Ins√©rer plusieurs articles avec g√©n√©ration automatique du slug
        const newArticles = await prisma.$transaction(
            articles.map(article => {
                const slug = generateSlug(article.title, crypto.randomUUID()); // ‚úÖ G√©n√®re un slug unique
                return prisma.article.create({
                    data: {
                        title: article.title,
                        slug, // ‚úÖ Ajout du slug g√©n√©r√©
                        content: article.content,
                        image: article.image || null,
                        iconSrc: article.iconSrc || "/icons/default.png",
                        category: article.category,
                        tags: article.tags || [],
                        author: article.author, // V√©rifie que c'est bien un `authorId` attendu
                        description: article.description || null,
                        date: article.date ? new Date(article.date) : new Date(), // ‚úÖ Ajoute une date par d√©faut
                    },
                });
            })
        );

        return NextResponse.json({ message: "‚úÖ Articles cr√©√©s", count: newArticles.length }, { status: 201 });
    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation des articles :", error);
        return NextResponse.json({ message: "Erreur serveur", error: (error as Error).message }, { status: 500 });
    }
}

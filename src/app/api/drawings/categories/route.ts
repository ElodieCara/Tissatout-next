import { PrismaClient } from "@prisma/client";
import { NextResponse } from "next/server";
import { ObjectId } from "mongodb";

const prisma = new PrismaClient();

export async function GET() {
    try {
        console.log("üîç R√©cup√©ration des cat√©gories...");

        const categories = await prisma.drawingCategory.findMany({
            orderBy: { name: "asc" }
        });

        console.log("‚úÖ Cat√©gories trouv√©es :", categories);

        return NextResponse.json(categories);
    } catch (error: unknown) {
        console.error("‚ùå Erreur API GET /categories :", error);

        // V√©rifie si c'est bien une erreur avec un message
        const errorMessage = error instanceof Error ? error.message : "Erreur inconnue";

        return NextResponse.json({ error: "Erreur serveur", details: errorMessage }, { status: 500 });
    }
}

export async function POST(req: Request) {
    try {
        const { name, section, description, iconSrc, parentId } = await req.json();

        if (!name) {
            return NextResponse.json({ error: "Le nom est requis" }, { status: 400 });
        }

        // üîç V√©rifier si la section existe
        let sectionRecord = await prisma.categorySection.findFirst({
            where: { name: section }, // ‚úÖ Utilise "section" au lieu de "sectionName"
        });

        // Si la section n'existe pas, on la cr√©e
        if (!sectionRecord) {
            sectionRecord = await prisma.categorySection.create({
                data: { name: section }, // ‚úÖ Corrig√©
            });
        }

        // ‚úÖ Cr√©ation de la cat√©gorie avec sectionId
        const newCategory = await prisma.drawingCategory.create({
            data: {
                name,
                sectionId: sectionRecord.id, // üî• Associe bien l'ID de la section
                parentId: parentId || null, // Peut √™tre une sous-cat√©gorie
            },
        });

        return NextResponse.json(newCategory, { status: 201 });

    } catch (error) {
        console.error("‚ùå Erreur POST /categories :", error);
        return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
    }
}

export async function DELETE(req: Request) {
    try {
        const { searchParams } = new URL(req.url);
        const id = searchParams.get("id");

        if (!id || !ObjectId.isValid(id)) {
            return NextResponse.json({ error: "ID invalide" }, { status: 400 });
        }

        // üîç V√©rifier si la cat√©gorie a des sous-cat√©gories
        const subCategories = await prisma.drawingCategory.findMany({
            where: { parentId: id },
        });

        if (subCategories.length > 0) {
            return NextResponse.json({ error: "Impossible de supprimer : cette cat√©gorie contient des sous-cat√©gories." }, { status: 400 });
        }

        // ‚úÖ Suppression de la cat√©gorie
        await prisma.drawingCategory.delete({ where: { id } });
        return NextResponse.json({ message: "Cat√©gorie supprim√©e" });

    } catch (error) {
        console.error("‚ùå Erreur DELETE /categories :", error);
        return NextResponse.json({ error: "Erreur lors de la suppression" }, { status: 500 });
    }
}
